/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.rocketmq.common;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Message extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3659726308406016638L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Message\",\"namespace\":\"org.apache.rocketmq.common\",\"fields\":[{\"name\":\"topic\",\"type\":\"string\"},{\"name\":\"flag\",\"type\":\"int\"},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"body\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence topic;
  @Deprecated public int flag;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;
  @Deprecated public java.nio.ByteBuffer body;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Message() {}

  /**
   * All-args constructor.
   * @param topic The new value for topic
   * @param flag The new value for flag
   * @param properties The new value for properties
   * @param body The new value for body
   */
  public Message(java.lang.CharSequence topic, java.lang.Integer flag, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties, java.nio.ByteBuffer body) {
    this.topic = topic;
    this.flag = flag;
    this.properties = properties;
    this.body = body;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return topic;
    case 1: return flag;
    case 2: return properties;
    case 3: return body;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: topic = (java.lang.CharSequence)value$; break;
    case 1: flag = (java.lang.Integer)value$; break;
    case 2: properties = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 3: body = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'topic' field.
   * @return The value of the 'topic' field.
   */
  public java.lang.CharSequence getTopic() {
    return topic;
  }

  /**
   * Sets the value of the 'topic' field.
   * @param value the value to set.
   */
  public void setTopic(java.lang.CharSequence value) {
    this.topic = value;
  }

  /**
   * Gets the value of the 'flag' field.
   * @return The value of the 'flag' field.
   */
  public java.lang.Integer getFlag() {
    return flag;
  }

  /**
   * Sets the value of the 'flag' field.
   * @param value the value to set.
   */
  public void setFlag(java.lang.Integer value) {
    this.flag = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return The value of the 'properties' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.properties = value;
  }

  /**
   * Gets the value of the 'body' field.
   * @return The value of the 'body' field.
   */
  public java.nio.ByteBuffer getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * @param value the value to set.
   */
  public void setBody(java.nio.ByteBuffer value) {
    this.body = value;
  }

  /**
   * Creates a new Message RecordBuilder.
   * @return A new Message RecordBuilder
   */
  public static org.apache.rocketmq.common.Message.Builder newBuilder() {
    return new org.apache.rocketmq.common.Message.Builder();
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Message RecordBuilder
   */
  public static org.apache.rocketmq.common.Message.Builder newBuilder(org.apache.rocketmq.common.Message.Builder other) {
    return new org.apache.rocketmq.common.Message.Builder(other);
  }

  /**
   * Creates a new Message RecordBuilder by copying an existing Message instance.
   * @param other The existing instance to copy.
   * @return A new Message RecordBuilder
   */
  public static org.apache.rocketmq.common.Message.Builder newBuilder(org.apache.rocketmq.common.Message other) {
    return new org.apache.rocketmq.common.Message.Builder(other);
  }

  /**
   * RecordBuilder for Message instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Message>
    implements org.apache.avro.data.RecordBuilder<Message> {

    private java.lang.CharSequence topic;
    private int flag;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> properties;
    private java.nio.ByteBuffer body;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.rocketmq.common.Message.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.flag)) {
        this.flag = data().deepCopy(fields()[1].schema(), other.flag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.properties)) {
        this.properties = data().deepCopy(fields()[2].schema(), other.properties);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Message instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.rocketmq.common.Message other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.topic)) {
        this.topic = data().deepCopy(fields()[0].schema(), other.topic);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.flag)) {
        this.flag = data().deepCopy(fields()[1].schema(), other.flag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.properties)) {
        this.properties = data().deepCopy(fields()[2].schema(), other.properties);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.body)) {
        this.body = data().deepCopy(fields()[3].schema(), other.body);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'topic' field.
      * @return The value.
      */
    public java.lang.CharSequence getTopic() {
      return topic;
    }

    /**
      * Sets the value of the 'topic' field.
      * @param value The value of 'topic'.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder setTopic(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.topic = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'topic' field has been set.
      * @return True if the 'topic' field has been set, false otherwise.
      */
    public boolean hasTopic() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'topic' field.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder clearTopic() {
      topic = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'flag' field.
      * @return The value.
      */
    public java.lang.Integer getFlag() {
      return flag;
    }

    /**
      * Sets the value of the 'flag' field.
      * @param value The value of 'flag'.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder setFlag(int value) {
      validate(fields()[1], value);
      this.flag = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'flag' field has been set.
      * @return True if the 'flag' field has been set, false otherwise.
      */
    public boolean hasFlag() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'flag' field.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder clearFlag() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder setProperties(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.properties = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'properties' field.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'body' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBody() {
      return body;
    }

    /**
      * Sets the value of the 'body' field.
      * @param value The value of 'body'.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder setBody(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.body = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'body' field has been set.
      * @return True if the 'body' field has been set, false otherwise.
      */
    public boolean hasBody() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'body' field.
      * @return This builder.
      */
    public org.apache.rocketmq.common.Message.Builder clearBody() {
      body = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Message build() {
      try {
        Message record = new Message();
        record.topic = fieldSetFlags()[0] ? this.topic : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.flag = fieldSetFlags()[1] ? this.flag : (java.lang.Integer) defaultValue(fields()[1]);
        record.properties = fieldSetFlags()[2] ? this.properties : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        record.body = fieldSetFlags()[3] ? this.body : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
